name: Workflow

on:
  push:
    branches:
      - feat-devsecops

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: '20'
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'
    - name: Install SonarCloud Scanner locally
      run: npm install sonar-scanner --save-dev
  
    - name: Run SonarCloud analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          with:
          args: >
            -Dsonar.projectKey=devsecops7_laboratorio-final
            -Dsonar.organization=devsecops7
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} 
            -Dsonar.branch.name=feat-devsecops


    # - name: SonarQube Quality Gate Check
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
    #   with:
    #     scanMetadataReportFile: './.scannerwork/report-task.txt'
      

      



            
  #------------SCA-----------------

  SCA:
      needs: SAST
      runs-on: ubuntu-latest
      steps:
      - name: Set up Node.js 20
        uses: actions/setup-node@v2
        with:
          node-version: '20'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:

          args: --all-projects --severity-threshold=high --json






 #---------------DOCKER IMAGE-----------------------------

  DockerBuild:
    needs: SCA
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker
        run: |
          docker build --tag cristinamatheuv/devsecops:latest .
      
      - name: Push Docker Image
        run: |
          docker push cristinamatheuv/devsecops:latest
      
      
      
      - name: Build Docker
        run: |
          docker build --tag cristinamatheuv/devsecops:latest .



#-------------------- Docker Scan ------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: | 
        docker pull cristinamatheuv/devsecops:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cristinamatheuv/devsecops:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push Docker
      run: |
        docker push cristinamatheuv/devsecops:latest
        



    #-------------------- Deploy  ------------------------------------------

  Deploy:
    needs: DockerScan
    runs-on: self-hosted
    steps: 
        - name: Clonacion de codigo
          uses: actions/checkout@v4
        - name: Despliegue
          run: |
            kubectl apply -f ./Kubernetes/deployment.yml     
      

name: Workflow

on:
  push:
    branches:
      - feat-devsecops

jobs:
  SAST:
    name: SAST
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
            #pwd
            ls -R
            set +e
            curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=curso-devsecops-usach-test' -d 'visibility=public'
            if [ $? -ne 0 ]; then
              echo "Proyecto ya existe en Sonarcloud"
              echo "::set-output name=proyectoExiste::1"
            else
              echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
              
              echo "Se establece rama main como rama por defecto"
              curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=${{ github.event.repository.name }}'
            fi
            set -e
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=devsecops7_laboratorio-final
            -Dsonar.organization=devsecops7
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} 
            -Dsonar.branch.name=feat-devsecops

     

  #------------SCA-----------------

  SCA:
      needs: SAST
      runs-on: ubuntu-latest
      steps:
      
      - name: Checkout code
        uses: actions/checkout@v2      
  
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired
  
      - name: Upload Test result
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports
 #---------------DOCKER
  DockerBuild:
    needs: SCA
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker
        run: |
          docker build --tag cristinamatheuv/devsecops:latest .
      
      - name: Push Docker Image
        run: |
          docker push cristinamatheuv/devsecops:latest
      
      
      
      - name: Build Docker
        run: |
          docker build --tag cristinamatheuv/devsecops:latest .



#-------------------- Docker Scan ------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: | 
        docker pull dusankm/netflix-app:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cristinamatheuv/devsecops:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push Docker
      run: |
        docker push cristinamatheuv/devsecops:latest
        
      
      
